import Head from "next/head";
import {useEffect, useRef, useState} from "react";
import axios from "axios";
import SongInfo from "@/components/song-info";
import Spinner from "@/components/spinner";
import Businesses from "@/components/businesses";


export default function Home() {

    const [listening,setListening] = useState(false)
    const [isSupported,setIsSupported] = useState(false)
    const [songData, setSongData] = useState(null)
    const [loading, setLoading] = useState(false)
    const mediaStream = useRef(null);
    const mediaRecorder = useRef(null);
    const chunks = useRef([]);
    const [coordinates,setCoordinates] = useState(null);
    const [places,setPlaces] = useState(null)
    let timeout;

    const getCoordinates = () => {
        if (!navigator.geolocation) {
            return;
        }
        navigator.geolocation.getCurrentPosition((position) => {
            setCoordinates(position.coords)
        });
    }

    const startRecording = async () => {
        try {
            const stream = await navigator.mediaDevices.getUserMedia(
                { audio: true }
            );
            mediaStream.current = stream;
            mediaRecorder.current = new MediaRecorder(stream);
            mediaRecorder.current.ondataavailable = (e) => {
                if (e.data.size > 0) {
                    chunks.current.push(e.data);
                }
            };
            mediaRecorder.current.onstop = () => {
                const recordedBlob = new Blob( chunks.current, { type: 'audio/webm' } );
                const audioFile = new File([recordedBlob], 'voice.wav', { type: 'audio/wav' });
                const formData = new FormData(); // preparing to send to the server
                formData.append('file', audioFile);
                formData.append('api_token', process.env.NEXT_PUBLIC_AUDD_TOKEN);
                formData.append('return', 'apple_music,spotify,deezer,napster');
                setLoading(true)
                axios.post('https://api.audd.io/', formData, {headers: {'Content-Type': 'multipart/form-data'}})
                    .then(response=> {
                        if (response.data.result) {
                            setSongData(response.data.result)
                        }
                        setLoading(false)
                    })
                    .catch(err=>setLoading(false))
                const url = URL.createObjectURL(recordedBlob);
                chunks.current = [];
            };
            mediaRecorder.current.start();
            timeout =  setTimeout(() => {setListening(false)}, 10000);
        } catch (error) {
            setListening(false)
            console.error('Error accessing microphone:', error);
        }
    };

    const stopRecording = () => {
        if (mediaRecorder.current && mediaRecorder.current.state === 'recording') {
            mediaRecorder.current.stop();
        }
        if (mediaStream.current) {
            mediaStream.current.getTracks().forEach((track) => {
                track.stop();
            });
        }
    };

    useEffect(()=>{
        if(listening){
            startRecording()
        }else{
          if (mediaStream?.current)  stopRecording()
            clearTimeout(timeout)
        }
        return ()=>{
            clearTimeout(timeout)
        }
    },[listening])

    useEffect(()=>{
        if(coordinates){
            axios.get('/api/get-location',{params: {location: `${coordinates.latitude},${coordinates.longitude}`,type: 'cafe'}})
                .then(response=>{
                    switch (response?.data?.status) {
                        case "ZERO_RESULTS":
                            setPlaces([])
                            break;
                        case "OK":
                            setPlaces(response.data.results)
                            break;
                            default:
                                setPlaces([])
                            break
                    }
                    console.log("data",response.data)
                })
                .catch(err=>console.log(err))
        }

    },[coordinates])

    useEffect(()=>{
        getCoordinates()
        if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
            setIsSupported(true)
        } else {
            setIsSupported(false)
        }
    },[])

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description"  content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
        <div className="main">
            {
                isSupported ?
                    <>
                        {!places && <Spinner />}
                        {places && <>{places?.length > 0 ? <Businesses businesses={places} /> : <div className="no-places">Yak覺n覺n覺zda konum bulunamad覺</div>}</>}
                        {songData && !listening && <SongInfo {...songData} />}
                        {loading ? <Spinner/> : <div onClick={() => setListening(current => !current)}
                                                     className={listening ? 'pulsating-circle' : 'circle'}></div>}
                    </>
                    :
                    <div>Not supported</div>

            }
        </div>

    </>
  );
}
